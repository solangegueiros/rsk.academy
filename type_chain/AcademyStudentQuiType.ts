/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

export interface AcademyStudentQuizInterface extends ethers.utils.Interface {
  functions: {
    'DEFAULT_ADMIN_ROLE()': FunctionFragment
    'getRoleAdmin(bytes32)': FunctionFragment
    'getRoleMember(bytes32,uint256)': FunctionFragment
    'getRoleMemberCount(bytes32)': FunctionFragment
    'grantRole(bytes32,address)': FunctionFragment
    'hasRole(bytes32,address)': FunctionFragment
    'renounceRole(bytes32,address)': FunctionFragment
    'revokeRole(bytes32,address)': FunctionFragment
    'addStudentQuizAnswer(address,string,string,uint8,uint8)': FunctionFragment
    'indexOf(address,string)': FunctionFragment
    'exists(address,string)': FunctionFragment
    'getStudentQuiz(address,string)': FunctionFragment
    'countStudentByQuiz(string)': FunctionFragment
    'countQuizByStudent(address)': FunctionFragment
    'listStudentByQuiz(string)': FunctionFragment
    'listQuizByStudent(address)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string
  encodeFunctionData(functionFragment: 'getRoleMember', values: [BytesLike, BigNumberish]): string
  encodeFunctionData(functionFragment: 'getRoleMemberCount', values: [BytesLike]): string
  encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, string]): string
  encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, string]): string
  encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, string]): string
  encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, string]): string
  encodeFunctionData(
    functionFragment: 'addStudentQuizAnswer',
    values: [string, string, string, BigNumberish, BigNumberish],
  ): string
  encodeFunctionData(functionFragment: 'indexOf', values: [string, string]): string
  encodeFunctionData(functionFragment: 'exists', values: [string, string]): string
  encodeFunctionData(functionFragment: 'getStudentQuiz', values: [string, string]): string
  encodeFunctionData(functionFragment: 'countStudentByQuiz', values: [string]): string
  encodeFunctionData(functionFragment: 'countQuizByStudent', values: [string]): string
  encodeFunctionData(functionFragment: 'listStudentByQuiz', values: [string]): string
  encodeFunctionData(functionFragment: 'listQuizByStudent', values: [string]): string

  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getRoleMember', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getRoleMemberCount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'addStudentQuizAnswer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'indexOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'exists', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getStudentQuiz', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'countStudentByQuiz', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'countQuizByStudent', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'listStudentByQuiz', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'listQuizByStudent', data: BytesLike): Result

  events: {
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment
    'RoleGranted(bytes32,address,address)': EventFragment
    'RoleRevoked(bytes32,address,address)': EventFragment
    'StudentGradeAdded(address,string,uint8,uint8,uint8)': EventFragment
    'StudentGradeDeleted(address,string)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'StudentGradeAdded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'StudentGradeDeleted'): EventFragment
}

export interface AcademyStudentQuizType extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: AcademyStudentQuizInterface

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>

    /**
     * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
     */
    getRoleMember(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    /**
     * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
     */
    getRoleMemberCount(role: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<[boolean]>

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    addStudentQuizAnswer(
      student: string,
      quiz: string,
      answer: string,
      total: BigNumberish,
      grade: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    indexOf(student: string, quiz: string, overrides?: CallOverrides): Promise<[BigNumber]>

    exists(student: string, quiz: string, overrides?: CallOverrides): Promise<[boolean]>

    'getStudentQuiz(address,string)'(
      student: string,
      quiz: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        [string, number, number, number, string, string] & {
          student: string
          total: number
          grade: number
          attempt: number
          quiz: string
          answer: string
        },
      ]
    >

    'getStudentQuiz(uint256)'(
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        [string, number, number, number, string, string] & {
          student: string
          total: number
          grade: number
          attempt: number
          quiz: string
          answer: string
        },
      ]
    >

    countStudentByQuiz(quiz: string, overrides?: CallOverrides): Promise<[BigNumber]>

    countQuizByStudent(student: string, overrides?: CallOverrides): Promise<[BigNumber]>

    listStudentByQuiz(quiz: string, overrides?: CallOverrides): Promise<[string[]]>

    listQuizByStudent(student: string, overrides?: CallOverrides): Promise<[string[]]>
  }

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

  /**
   * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
   */
  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>

  /**
   * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
   */
  getRoleMember(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<string>

  /**
   * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
   */
  getRoleMemberCount(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

  /**
   * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
   */
  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  /**
   * Returns `true` if `account` has been granted `role`.
   */
  hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>

  /**
   * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
   */
  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  /**
   * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
   */
  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  addStudentQuizAnswer(
    student: string,
    quiz: string,
    answer: string,
    total: BigNumberish,
    grade: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  indexOf(student: string, quiz: string, overrides?: CallOverrides): Promise<BigNumber>

  exists(student: string, quiz: string, overrides?: CallOverrides): Promise<boolean>

  'getStudentQuiz(address,string)'(
    student: string,
    quiz: string,
    overrides?: CallOverrides,
  ): Promise<
    [string, number, number, number, string, string] & {
      student: string
      total: number
      grade: number
      attempt: number
      quiz: string
      answer: string
    }
  >

  'getStudentQuiz(uint256)'(
    index: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, number, number, number, string, string] & {
      student: string
      total: number
      grade: number
      attempt: number
      quiz: string
      answer: string
    }
  >

  countStudentByQuiz(quiz: string, overrides?: CallOverrides): Promise<BigNumber>

  countQuizByStudent(student: string, overrides?: CallOverrides): Promise<BigNumber>

  listStudentByQuiz(quiz: string, overrides?: CallOverrides): Promise<string[]>

  listQuizByStudent(student: string, overrides?: CallOverrides): Promise<string[]>

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>

    /**
     * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
     */
    getRoleMember(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<string>

    /**
     * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
     */
    getRoleMemberCount(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>

    addStudentQuizAnswer(
      student: string,
      quiz: string,
      answer: string,
      total: BigNumberish,
      grade: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    indexOf(student: string, quiz: string, overrides?: CallOverrides): Promise<BigNumber>

    exists(student: string, quiz: string, overrides?: CallOverrides): Promise<boolean>

    'getStudentQuiz(address,string)'(
      student: string,
      quiz: string,
      overrides?: CallOverrides,
    ): Promise<
      [string, number, number, number, string, string] & {
        student: string
        total: number
        grade: number
        attempt: number
        quiz: string
        answer: string
      }
    >

    'getStudentQuiz(uint256)'(
      index: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, number, number, number, string, string] & {
        student: string
        total: number
        grade: number
        attempt: number
        quiz: string
        answer: string
      }
    >

    countStudentByQuiz(quiz: string, overrides?: CallOverrides): Promise<BigNumber>

    countQuizByStudent(student: string, overrides?: CallOverrides): Promise<BigNumber>

    listStudentByQuiz(quiz: string, overrides?: CallOverrides): Promise<string[]>

    listQuizByStudent(student: string, overrides?: CallOverrides): Promise<string[]>
  }

  filters: {
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): TypedEventFilter<[string, string, string], { role: string; previousAdminRole: string; newAdminRole: string }>

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): TypedEventFilter<[string, string, string], { role: string; account: string; sender: string }>

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): TypedEventFilter<[string, string, string], { role: string; account: string; sender: string }>

    StudentGradeAdded(
      student?: string | null,
      quiz?: string | null,
      total?: null,
      grade?: null,
      attempt?: null,
    ): TypedEventFilter<
      [string, string, number, number, number],
      {
        student: string
        quiz: string
        total: number
        grade: number
        attempt: number
      }
    >

    StudentGradeDeleted(
      student?: string | null,
      quiz?: null,
    ): TypedEventFilter<[string, string], { student: string; quiz: string }>
  }

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    /**
     * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
     */
    getRoleMember(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    /**
     * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
     */
    getRoleMemberCount(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<BigNumber>

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    addStudentQuizAnswer(
      student: string,
      quiz: string,
      answer: string,
      total: BigNumberish,
      grade: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    indexOf(student: string, quiz: string, overrides?: CallOverrides): Promise<BigNumber>

    exists(student: string, quiz: string, overrides?: CallOverrides): Promise<BigNumber>

    'getStudentQuiz(address,string)'(student: string, quiz: string, overrides?: CallOverrides): Promise<BigNumber>

    'getStudentQuiz(uint256)'(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    countStudentByQuiz(quiz: string, overrides?: CallOverrides): Promise<BigNumber>

    countQuizByStudent(student: string, overrides?: CallOverrides): Promise<BigNumber>

    listStudentByQuiz(quiz: string, overrides?: CallOverrides): Promise<BigNumber>

    listQuizByStudent(student: string, overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    /**
     * Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.
     */
    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    /**
     * Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.
     */
    getRoleMember(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    /**
     * Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.
     */
    getRoleMemberCount(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    /**
     * Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.
     */
    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    /**
     * Returns `true` if `account` has been granted `role`.
     */
    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    /**
     * Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.
     */
    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    /**
     * Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.
     */
    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    addStudentQuizAnswer(
      student: string,
      quiz: string,
      answer: string,
      total: BigNumberish,
      grade: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    indexOf(student: string, quiz: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    exists(student: string, quiz: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    'getStudentQuiz(address,string)'(
      student: string,
      quiz: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    'getStudentQuiz(uint256)'(index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    countStudentByQuiz(quiz: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    countQuizByStudent(student: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    listStudentByQuiz(quiz: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    listQuizByStudent(student: string, overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
