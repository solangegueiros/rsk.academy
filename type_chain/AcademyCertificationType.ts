/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

export interface AcademyCertificationInterface extends ethers.utils.Interface {
  functions: {
    'DEFAULT_ADMIN_ROLE()': FunctionFragment
    'academyStudentQuiz()': FunctionFragment
    'addQuiz(string)': FunctionFragment
    'certificateIndex(address,string)': FunctionFragment
    'certificateInfo(uint256)': FunctionFragment
    'countQuiz()': FunctionFragment
    'decimalpercent()': FunctionFragment
    'delQuiz(string)': FunctionFragment
    'existCertificate(address,string)': FunctionFragment
    'existQuiz(string)': FunctionFragment
    'getCertificate(address,string)': FunctionFragment
    'getRoleAdmin(bytes32)': FunctionFragment
    'getRoleMember(bytes32,uint256)': FunctionFragment
    'getRoleMemberCount(bytes32)': FunctionFragment
    'grantRole(bytes32,address)': FunctionFragment
    'hasRole(bytes32,address)': FunctionFragment
    'listQuiz()': FunctionFragment
    'masterName()': FunctionFragment
    'quizList(uint256)': FunctionFragment
    'quizListIndex(string)': FunctionFragment
    'quizMinimum()': FunctionFragment
    'registerCertificate(address,string,string,string)': FunctionFragment
    'renounceRole(bytes32,address)': FunctionFragment
    'revokeRole(bytes32,address)': FunctionFragment
    'updateQuizMinimum(uint256)': FunctionFragment
    'validateStudent(address)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string
  encodeFunctionData(functionFragment: 'academyStudentQuiz', values?: undefined): string
  encodeFunctionData(functionFragment: 'addQuiz', values: [string]): string
  encodeFunctionData(functionFragment: 'certificateIndex', values: [string, string]): string
  encodeFunctionData(functionFragment: 'certificateInfo', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'countQuiz', values?: undefined): string
  encodeFunctionData(functionFragment: 'decimalpercent', values?: undefined): string
  encodeFunctionData(functionFragment: 'delQuiz', values: [string]): string
  encodeFunctionData(functionFragment: 'existCertificate', values: [string, string]): string
  encodeFunctionData(functionFragment: 'existQuiz', values: [string]): string
  encodeFunctionData(functionFragment: 'getCertificate', values: [string, string]): string
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string
  encodeFunctionData(functionFragment: 'getRoleMember', values: [BytesLike, BigNumberish]): string
  encodeFunctionData(functionFragment: 'getRoleMemberCount', values: [BytesLike]): string
  encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, string]): string
  encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, string]): string
  encodeFunctionData(functionFragment: 'listQuiz', values?: undefined): string
  encodeFunctionData(functionFragment: 'masterName', values?: undefined): string
  encodeFunctionData(functionFragment: 'quizList', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'quizListIndex', values: [string]): string
  encodeFunctionData(functionFragment: 'quizMinimum', values?: undefined): string
  encodeFunctionData(functionFragment: 'registerCertificate', values: [string, string, string, string]): string
  encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, string]): string
  encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, string]): string
  encodeFunctionData(functionFragment: 'updateQuizMinimum', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'validateStudent', values: [string]): string

  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'academyStudentQuiz', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'addQuiz', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'certificateIndex', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'certificateInfo', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'countQuiz', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'decimalpercent', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'delQuiz', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'existCertificate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'existQuiz', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getCertificate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getRoleMember', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getRoleMemberCount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'listQuiz', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'masterName', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'quizList', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'quizListIndex', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'quizMinimum', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'registerCertificate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'updateQuizMinimum', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'validateStudent', data: BytesLike): Result

  events: {
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment
    'RoleGranted(bytes32,address,address)': EventFragment
    'RoleRevoked(bytes32,address,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment
}

export interface AcademyCertificationType extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: AcademyCertificationInterface

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>

    academyStudentQuiz(overrides?: CallOverrides): Promise<[string]>

    addQuiz(name: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    certificateIndex(arg0: string, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>

    certificateInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, string] & {
        studentAddress: string
        studentName: string
        courseName: string
        storageHash: string
      }
    >

    countQuiz(overrides?: CallOverrides): Promise<[BigNumber]>

    decimalpercent(overrides?: CallOverrides): Promise<[BigNumber]>

    delQuiz(name: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    existCertificate(studentAddress: string, course: string, overrides?: CallOverrides): Promise<[boolean]>

    existQuiz(name: string, overrides?: CallOverrides): Promise<[boolean]>

    getCertificate(
      studentAddress: string,
      course: string,
      overrides?: CallOverrides,
    ): Promise<
      [
        [string, string, string, string] & {
          studentAddress: string
          studentName: string
          courseName: string
          storageHash: string
        },
      ]
    >

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>

    getRoleMember(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    getRoleMemberCount(role: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<[boolean]>

    listQuiz(overrides?: CallOverrides): Promise<[string[]]>

    masterName(overrides?: CallOverrides): Promise<[string]>

    quizList(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>

    quizListIndex(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>

    quizMinimum(overrides?: CallOverrides): Promise<[BigNumber]>

    registerCertificate(
      studentAddress: string,
      studentName: string,
      course: string,
      storageHash: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    updateQuizMinimum(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>

    validateStudent(studentAddress: string, overrides?: CallOverrides): Promise<[boolean]>
  }

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

  academyStudentQuiz(overrides?: CallOverrides): Promise<string>

  addQuiz(name: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  certificateIndex(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

  certificateInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, string, string] & {
      studentAddress: string
      studentName: string
      courseName: string
      storageHash: string
    }
  >

  countQuiz(overrides?: CallOverrides): Promise<BigNumber>

  decimalpercent(overrides?: CallOverrides): Promise<BigNumber>

  delQuiz(name: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  existCertificate(studentAddress: string, course: string, overrides?: CallOverrides): Promise<boolean>

  existQuiz(name: string, overrides?: CallOverrides): Promise<boolean>

  getCertificate(
    studentAddress: string,
    course: string,
    overrides?: CallOverrides,
  ): Promise<
    [string, string, string, string] & {
      studentAddress: string
      studentName: string
      courseName: string
      storageHash: string
    }
  >

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>

  getRoleMember(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<string>

  getRoleMemberCount(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>

  listQuiz(overrides?: CallOverrides): Promise<string[]>

  masterName(overrides?: CallOverrides): Promise<string>

  quizList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  quizListIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  quizMinimum(overrides?: CallOverrides): Promise<BigNumber>

  registerCertificate(
    studentAddress: string,
    studentName: string,
    course: string,
    storageHash: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  updateQuizMinimum(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>

  validateStudent(studentAddress: string, overrides?: CallOverrides): Promise<boolean>

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>

    academyStudentQuiz(overrides?: CallOverrides): Promise<string>

    addQuiz(name: string, overrides?: CallOverrides): Promise<BigNumber>

    certificateIndex(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    certificateInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, string] & {
        studentAddress: string
        studentName: string
        courseName: string
        storageHash: string
      }
    >

    countQuiz(overrides?: CallOverrides): Promise<BigNumber>

    decimalpercent(overrides?: CallOverrides): Promise<BigNumber>

    delQuiz(name: string, overrides?: CallOverrides): Promise<boolean>

    existCertificate(studentAddress: string, course: string, overrides?: CallOverrides): Promise<boolean>

    existQuiz(name: string, overrides?: CallOverrides): Promise<boolean>

    getCertificate(
      studentAddress: string,
      course: string,
      overrides?: CallOverrides,
    ): Promise<
      [string, string, string, string] & {
        studentAddress: string
        studentName: string
        courseName: string
        storageHash: string
      }
    >

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>

    getRoleMember(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<string>

    getRoleMemberCount(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    grantRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>

    listQuiz(overrides?: CallOverrides): Promise<string[]>

    masterName(overrides?: CallOverrides): Promise<string>

    quizList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

    quizListIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    quizMinimum(overrides?: CallOverrides): Promise<BigNumber>

    registerCertificate(
      studentAddress: string,
      studentName: string,
      course: string,
      storageHash: string,
      overrides?: CallOverrides,
    ): Promise<boolean>

    renounceRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>

    revokeRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>

    updateQuizMinimum(value: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    validateStudent(studentAddress: string, overrides?: CallOverrides): Promise<boolean>
  }

  filters: {
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): TypedEventFilter<[string, string, string], { role: string; previousAdminRole: string; newAdminRole: string }>

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): TypedEventFilter<[string, string, string], { role: string; account: string; sender: string }>

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): TypedEventFilter<[string, string, string], { role: string; account: string; sender: string }>
  }

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>

    academyStudentQuiz(overrides?: CallOverrides): Promise<BigNumber>

    addQuiz(name: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    certificateIndex(arg0: string, arg1: string, overrides?: CallOverrides): Promise<BigNumber>

    certificateInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    countQuiz(overrides?: CallOverrides): Promise<BigNumber>

    decimalpercent(overrides?: CallOverrides): Promise<BigNumber>

    delQuiz(name: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    existCertificate(studentAddress: string, course: string, overrides?: CallOverrides): Promise<BigNumber>

    existQuiz(name: string, overrides?: CallOverrides): Promise<BigNumber>

    getCertificate(studentAddress: string, course: string, overrides?: CallOverrides): Promise<BigNumber>

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    getRoleMember(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getRoleMemberCount(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<BigNumber>

    listQuiz(overrides?: CallOverrides): Promise<BigNumber>

    masterName(overrides?: CallOverrides): Promise<BigNumber>

    quizList(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    quizListIndex(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    quizMinimum(overrides?: CallOverrides): Promise<BigNumber>

    registerCertificate(
      studentAddress: string,
      studentName: string,
      course: string,
      storageHash: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    updateQuizMinimum(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>

    validateStudent(studentAddress: string, overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>

    academyStudentQuiz(overrides?: CallOverrides): Promise<PopulatedTransaction>

    addQuiz(name: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    certificateIndex(arg0: string, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    certificateInfo(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    countQuiz(overrides?: CallOverrides): Promise<PopulatedTransaction>

    decimalpercent(overrides?: CallOverrides): Promise<PopulatedTransaction>

    delQuiz(name: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    existCertificate(studentAddress: string, course: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    existQuiz(name: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getCertificate(studentAddress: string, course: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getRoleMember(role: BytesLike, index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getRoleMemberCount(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    listQuiz(overrides?: CallOverrides): Promise<PopulatedTransaction>

    masterName(overrides?: CallOverrides): Promise<PopulatedTransaction>

    quizList(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>

    quizListIndex(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    quizMinimum(overrides?: CallOverrides): Promise<PopulatedTransaction>

    registerCertificate(
      studentAddress: string,
      studentName: string,
      course: string,
      storageHash: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    updateQuizMinimum(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>

    validateStudent(studentAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
